"use strict";(self.webpackChunkvrcft_docs=self.webpackChunkvrcft_docs||[]).push([[8391],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>y});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},v=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(r),v=n,y=u["".concat(l,".").concat(v)]||u[v]||c[v]||o;return r?a.createElement(y,i(i({ref:t},m),{},{components:r})):a.createElement(y,i({ref:t},m))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=v;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:n,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}v.displayName="MDXCreateElement"},56916:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=r(87462),n=(r(67294),r(3905));const o={},i="Float Parameters",s={unversionedId:"tutorial-avatars/tutorial-avatars-extras/parameters/types/float",id:"version-v4.0/tutorial-avatars/tutorial-avatars-extras/parameters/types/float",title:"Float Parameters",description:"Float parameters are, for the most part, the best parameter type to use: they are the most flexible, have priority*, get smoothed over the network (if under priority*), and the easiest to setup parameter. Float parameters have the ability to be used in Blend Trees, which gives them the ability to blend between multiple animations at a time.",source:"@site/versioned_docs/version-v4.0/tutorial-avatars/tutorial-avatars-extras/parameters/types/float.md",sourceDirName:"tutorial-avatars/tutorial-avatars-extras/parameters/types",slug:"/tutorial-avatars/tutorial-avatars-extras/parameters/types/float",permalink:"/docs/v4.0/tutorial-avatars/tutorial-avatars-extras/parameters/types/float",draft:!1,editUrl:"https://github.com/VRCFaceTracking/docs/edit/master/versioned_docs/version-v4.0/tutorial-avatars/tutorial-avatars-extras/parameters/types/float.md",tags:[],version:"v4.0",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Binary Parameters",permalink:"/docs/v4.0/tutorial-avatars/tutorial-avatars-extras/parameters/types/binary"},next:{title:"Eye Tracking Parameters",permalink:"/docs/v4.0/tutorial-avatars/tutorial-avatars-extras/parameters/eye-tracking-parameters"}},l={},p=[],m={toc:p},u="wrapper";function c(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"float-parameters"},"Float Parameters"),(0,n.kt)("p",null,"Float parameters are, for the most part, the ",(0,n.kt)("strong",{parentName:"p"},"best")," parameter type to use: they are the ",(0,n.kt)("em",{parentName:"p"},"most flexible"),", have ",(0,n.kt)("em",{parentName:"p"},"priority*"),", get ",(0,n.kt)("em",{parentName:"p"},"smoothed over the network")," (if under ",(0,n.kt)("em",{parentName:"p"},"priority*"),"), and the easiest to setup parameter. Float parameters have the ability to be used in Blend Trees, which gives them the ability to blend between multiple animations at a time."),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"*Priority")," is an attribute given to a Float parameter which makes it operate under IK Sync, the fastest network sync available in VRChat. Only float parameters and only up to 8 of them can operate in this mode."),(0,n.kt)("p",null,"Float parameters are typically driven with a Blend Tree, such as the one pictured below:"),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://i.imgur.com/KSAPIFz.png",alt:null})),(0,n.kt)("p",null,"There are multiple Float parameters that are given in an X and Y distinction, and using a 2D Blend Tree is the best way to control these parameters. Here is an example of how you would drive such a parameter:"),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://i.imgur.com/DGsedgX.png",alt:null})))}c.isMDXComponent=!0}}]);